// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  email            String    @unique
  phone            String?   @unique
  passwordHash     String
  firstName        String
  lastName         String
  isActive         Boolean   @default(true)
  lastLoginAt      DateTime?
  roleId           String
  role             Role      @relation(fields: [roleId], references: [id])
  teams            TeamMember[]
  attributes       UserAttributeValue[]
  messages         Message[]
  tasksAssigned    Task[]      @relation("TaskAssignee")
  tasksCreated     Task[]      @relation("TaskCreator")
  eventsCreated    Event[]     @relation("EventCreator")
  leadsOwned       Lead[]      @relation("LeadOwner")
  leadsAssigned    LeadAssignment[]
  leadNotesAuthored LeadNote[] @relation("LeadNoteAuthor")
  expenses         Expense[]   @relation("ExpenseCreator")
}

model Role {
  id          String         @id @default(cuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  name        String         @unique
  description String?
  permissions Permission[]
  users       User[]
}

model Permission {
  id        String   @id @default(cuid())
  key       String   @unique
  roles     Role[]
}

model Team {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  name      String        @unique
  members   TeamMember[]
}

model TeamMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  teamId    String
  user      User     @relation(fields: [userId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])
  @@unique([userId, teamId])
}

model Product {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  sku         String?    @unique
  description String?
  price       Decimal    @db.Decimal(12, 2)
  isActive    Boolean    @default(true)
  orders      Order[]
}

model Lead {
  id                String           @id @default(cuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  primaryFieldKey   String
  primaryFieldValue String
  firstName         String?
  lastName          String?
  email             String?
  phone             String?
  source            String?
  statusId          String
  status            LeadStatus       @relation(fields: [statusId], references: [id])
  ownerId           String?
  owner             User?            @relation("LeadOwner", fields: [ownerId], references: [id])
  assigned          LeadAssignment[]
  customValues      LeadCustomValue[]
  notes             LeadNote[]
  events            Event[]
  orders            Order[]
  messages          Message[]
  tasks             Task[]
  isConverted       Boolean          @default(false)
  convertedAt       DateTime?
}

model LeadStatus {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  colorHex  String?
  order     Int      @default(0)
  leads     Lead[]
}

model LeadAssignment {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  leadId        String
  assigneeId    String
  expiresAt     DateTime?
  unassignedAt  DateTime?
  lead          Lead     @relation(fields: [leadId], references: [id])
  assignee      User     @relation(fields: [assigneeId], references: [id])
  @@index([assigneeId])
  @@index([leadId])
}

model LeadCustomField {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  name        String
  key         String           @unique
  type        String
  isRequired  Boolean          @default(false)
  leadValues  LeadCustomValue[]
}

model LeadCustomValue {
  id        String          @id @default(cuid())
  leadId    String
  fieldId   String
  value     String
  lead      Lead            @relation(fields: [leadId], references: [id])
  field     LeadCustomField @relation(fields: [fieldId], references: [id])
  @@unique([leadId, fieldId])
}

model LeadNote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  leadId    String
  authorId  String
  content   String
  lead      Lead     @relation(fields: [leadId], references: [id])
  author    User     @relation("LeadNoteAuthor", fields: [authorId], references: [id])
}

model Event {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  when        DateTime
  type        String
  title       String
  description String?
  creatorId   String
  leadId      String?
  creator     User     @relation("EventCreator", fields: [creatorId], references: [id])
  lead        Lead?    @relation(fields: [leadId], references: [id])
}

model MessageTemplate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  channel   String
  content   String
}

model Message {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  to            String
  channel       String
  content       String
  status        String   @default("queued")
  queuedForSend DateTime?
  sentAt        DateTime?
  userId        String?
  leadId        String?
  user          User?    @relation(fields: [userId], references: [id])
  lead          Lead?    @relation(fields: [leadId], references: [id])
}

model Automation {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String
  trigger      String
  action       String
  isActive     Boolean  @default(true)
}

model Order {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  wooId       String?  @unique
  leadId      String?
  productId   String?
  amount      Decimal  @db.Decimal(12, 2)
  status      String
  lead        Lead?    @relation(fields: [leadId], references: [id])
  product     Product? @relation(fields: [productId], references: [id])
  installments Installment[]
}

model Installment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  orderId   String
  dueDate   DateTime
  amount    Decimal  @db.Decimal(12, 2)
  isPaid    Boolean  @default(false)
  paidAt    DateTime?
  order     Order    @relation(fields: [orderId], references: [id])
}

model Expense {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category  String
  amount    Decimal  @db.Decimal(12, 2)
  note      String?
  createdBy String
  creator   User     @relation("ExpenseCreator", fields: [createdBy], references: [id])
}

model FieldDefinition {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entity    String
  key       String
  label     String
  type      String
  required  Boolean  @default(false)
  @@unique([entity, key])
}

model UserAttributeDefinition {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  key       String   @unique
  label     String
  type      String
  values    UserAttributeValue[]
}

model UserAttributeValue {
  id           String                   @id @default(cuid())
  userId       String
  definitionId String
  value        String
  user         User                     @relation(fields: [userId], references: [id])
  definition   UserAttributeDefinition  @relation(fields: [definitionId], references: [id])
  @@unique([userId, definitionId])
}

model PhoneBankCategory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String   @unique
  numbers   PhoneBankNumber[]
}

model PhoneBankNumber {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  categoryId  String?
  phone       String   @unique
  assignedTo  String?
  assignedAt  DateTime?
  notes       String?
  category    PhoneBankCategory? @relation(fields: [categoryId], references: [id])
}

model Integration {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  type      String
  config    Json
  isActive  Boolean  @default(false)
}

model QueueItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  type      String
  payload   Json
  status    String   @default("queued")
  runAt     DateTime?
  processedAt DateTime?
}

model Prefix {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  country   String
  code      String
  isActive  Boolean  @default(true)
  @@unique([country, code])
}

model Task {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  dueDate     DateTime?
  status      String   @default("pending")
  creatorId   String
  assigneeId  String
  leadId      String?
  creator     User     @relation("TaskCreator", fields: [creatorId], references: [id])
  assignee    User     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  lead        Lead?    @relation(fields: [leadId], references: [id])
}
